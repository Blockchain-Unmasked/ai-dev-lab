[tool:pytest]
# AI/DEV Lab Testing Framework Configuration
# Comprehensive pytest settings for maintaining 100/100 scores

# Test Discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test Execution
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --maxfail=10
    --durations=10
    --cov=app
    --cov-report=term-missing
    --cov-report=html:reports/coverage
    --cov-report=xml:reports/coverage.xml
    --junitxml=reports/junit.xml
    --html=reports/pytest_report.html
    --self-contained-html

# Markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interaction
    e2e: End-to-end tests for complete workflows
    security: Security and vulnerability tests
    performance: Performance and load tests
    mcp: MCP server and tool tests
    backend: Backend API and database tests
    frontend: Frontend component and UI tests
    slow: Tests that take longer to run
    critical: Critical path tests that must pass
    ocint: OCINT standards compliance tests

# Filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning

# Coverage Configuration
[coverage:run]
source = app
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */migrations/*
    */node_modules/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Test Environment
[tool:pytest.ini_options]
env = 
    TESTING=true
    APP_ENV=testing
    DATABASE_URL=sqlite:///test_database.db
    SECRET_KEY=test-secret-key
    DEBUG=false

# Async Configuration
asyncio_mode = auto

# Performance Testing
benchmark_skip = false
benchmark_min_rounds = 10
benchmark_warmup = true

# Security Testing
bandit_skip = false
safety_skip = false
semgrep_skip = false
